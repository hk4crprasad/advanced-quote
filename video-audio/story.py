from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema import HumanMessage, SystemMessage
import random

# Try different import locations for StrOutputParser based on LangChain version
try:
    from langchain_core.output_parsers import StrOutputParser
except ImportError:
    try:
        from langchain.output_parsers import StrOutputParser
    except ImportError:
        # Fallback: Create a simple string output parser
        class StrOutputParser:
            def parse(self, text):
                return text if isinstance(text, str) else str(text)
            
            def __or__(self, other):
                return self
            
            def __call__(self, input_data):
                if hasattr(input_data, 'content'):
                    return input_data.content
                return str(input_data)

# Initialize the LLM with your LiteLLM configuration
llm = ChatOpenAI(
    openai_api_base="https://litellm.tecosys.ai/",
    openai_api_key="sk-LLPrAbLPEaAJIduZjOyRzw",
    model="cost-cut",
    temperature=0.8  # Higher temperature for more creative stories
)

# Create comprehensive prompt templates for different horror story types

# Template 1: Job Horror Stories
horror_job_story_template = """
‡§Ü‡§™‡§ï‡§æ ‡§ï‡§æ‡§Æ ‡§è‡§ï ‡§°‡§∞‡§æ‡§µ‡§®‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§≤‡§ø‡§ñ‡§®‡§æ ‡§π‡•à ‡§ú‡•ã ‡§è‡§ï ‡§®‡§à ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§π‡•à‡•§

‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ:
1. ‡§¨‡§ß‡§æ‡§à ‡§¶‡•á‡§ï‡§∞ ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡§∞‡•á‡§Ç
2. ‡§è‡§ï ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø/‡§°‡§∞‡§æ‡§µ‡§®‡•Ä ‡§ú‡§ó‡§π ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç  
3. ‡§∏‡§∞‡§≤ ‡§ï‡§æ‡§Æ ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§¶‡•á‡§Ç
4. ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§®‡§ø‡§Ø‡§Æ/‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä ‡§¶‡•á‡§Ç
5. ‡§Ö‡§≤‡•å‡§ï‡§ø‡§ï ‡§§‡§§‡•ç‡§µ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§∞‡•á‡§Ç
6. ‡§è‡§ï ‡§ñ‡•Å‡§≤‡§æ ‡§Ö‡§Ç‡§§ ‡§ú‡•ã ‡§°‡§∞ ‡§¨‡§®‡§æ‡§è ‡§∞‡§ñ‡•á

‡§≠‡§æ‡§∑‡§æ: ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç
‡§ü‡•ã‡§®: ‡§°‡§∞‡§æ‡§µ‡§®‡§æ, ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø, ‡§§‡§®‡§æ‡§µ‡§™‡•Ç‡§∞‡•ç‡§£
‡§≤‡§Ç‡§¨‡§æ‡§à: 100-150 ‡§∂‡§¨‡•ç‡§¶ (1 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø)

‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞: {job_type}
‡§∏‡•ç‡§•‡§æ‡§®: {location}
‡§∏‡§Æ‡§Ø: {shift_time}

‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§õ‡•ã‡§ü‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç ‡§ú‡•ã 1 ‡§Æ‡§ø‡§®‡§ü ‡§Æ‡•á‡§Ç ‡§™‡§¢‡§º‡•Ä ‡§ú‡§æ ‡§∏‡§ï‡•á‡•§
"""

# Template 2: General Horror Stories
horror_general_story_template = """
‡§è‡§ï ‡§°‡§∞‡§æ‡§µ‡§®‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç ‡§ú‡•ã ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§µ‡§ø‡§∑‡§Ø ‡§™‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§π‡•ã‡•§

‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ:
1. ‡§è‡§ï ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§∏‡•á ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§
2. ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§Ö‡§ú‡•Ä‡§¨ ‡§ò‡§ü‡§®‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§®
3. ‡§§‡§®‡§æ‡§µ ‡§¨‡§¢‡§º‡§æ‡§§‡•á ‡§π‡•Å‡§è ‡§∞‡§π‡§∏‡•ç‡§Ø‡§Æ‡§Ø ‡§§‡§§‡•ç‡§µ
4. ‡§Ö‡§≤‡•å‡§ï‡§ø‡§ï ‡§Ø‡§æ ‡§°‡§∞‡§æ‡§µ‡§®‡•á ‡§Æ‡•ã‡§°‡§º
5. ‡§¶‡§∞‡•ç‡§∂‡§ï‡•ã‡§Ç ‡§ï‡•ã ‡§°‡§∞‡§æ‡§®‡•á ‡§µ‡§æ‡§≤‡§æ ‡§Ö‡§Ç‡§§

‡§µ‡§ø‡§∑‡§Ø: {theme}
‡§∏‡•ç‡§•‡§æ‡§®: {setting}
‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§§‡§§‡•ç‡§µ: {element}

‡§≠‡§æ‡§∑‡§æ: ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç
‡§ü‡•ã‡§®: ‡§°‡§∞‡§æ‡§µ‡§®‡§æ, ‡§∞‡•ã‡§Æ‡§æ‡§Ç‡§ö‡§ï, ‡§§‡§®‡§æ‡§µ‡§™‡•Ç‡§∞‡•ç‡§£
‡§≤‡§Ç‡§¨‡§æ‡§à: 100-150 ‡§∂‡§¨‡•ç‡§¶ (1 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ ‡§™‡§¢‡§º‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø)

‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§õ‡•ã‡§ü‡•Ä ‡§î‡§∞ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§∂‡§æ‡§≤‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§≤‡§ø‡§ñ‡•á‡§Ç‡•§
"""

# Create the prompt templates
job_prompt = ChatPromptTemplate.from_template(horror_job_story_template)
general_prompt = ChatPromptTemplate.from_template(horror_general_story_template)

# Create the processing chain (compatible with older LangChain versions)
def create_chain(prompt_template, llm):
    """Create a chain that works with different LangChain versions"""
    try:
        # Try modern chain syntax
        return prompt_template | llm | StrOutputParser()
    except:
        # Fallback for older versions
        def chain_invoke(inputs):
            formatted_prompt = prompt_template.format(**inputs)
            response = llm.invoke([HumanMessage(content=formatted_prompt)])
            return response.content if hasattr(response, 'content') else str(response)
        return type('Chain', (), {'invoke': chain_invoke})()

# Remove the old chain creation with undefined prompt
# chain = create_chain(prompt, llm)

# Predefined job types, locations, and shifts for variety
job_types = [
    "‡§∞‡•á‡§°‡§ø‡§Ø‡•ã ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§ï‡§æ ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø ‡§™‡•ç‡§∞‡§∏‡§æ‡§∞‡§£",
    "‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§ï‡•Ä ‡§∏‡§´‡§æ‡§à", 
    "‡§ï‡§¨‡•ç‡§∞‡§ø‡§∏‡•ç‡§§‡§æ‡§® ‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ",
    "‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§Ø ‡§ï‡•Ä ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø ‡§∂‡§ø‡§´‡•ç‡§ü",
    "‡§´‡•à‡§ï‡•ç‡§ü‡•ç‡§∞‡•Ä ‡§ï‡•Ä ‡§®‡§ø‡§ó‡§∞‡§æ‡§®‡•Ä",
    "‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§ï‡•Ä ‡§∞‡§æ‡§§‡•ç‡§∞‡§ø ‡§∏‡§´‡§æ‡§à",
    "‡§ó‡•à‡§∏ ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§ï‡§æ ‡§ï‡§æ‡§â‡§Ç‡§ü‡§∞",
    "‡§π‡•ã‡§ü‡§≤ ‡§ï‡•Ä ‡§∞‡§ø‡§∏‡•á‡§™‡•ç‡§∂‡§®",
    "‡§Æ‡•á‡§ü‡•ç‡§∞‡•ã ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§ï‡•Ä ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§æ"
]

locations = [
    "‡§∂‡§π‡§∞ ‡§ï‡•á ‡§¨‡§æ‡§π‡§∞ ‡§è‡§ï ‡§µ‡•Ä‡§∞‡§æ‡§® ‡§™‡§π‡§æ‡§°‡§º‡•Ä ‡§™‡§∞",
    "‡§ò‡§®‡•á ‡§ú‡§Ç‡§ó‡§≤ ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§õ‡•Å‡§™‡§æ ‡§π‡•Å‡§Ü",
    "‡§®‡§¶‡•Ä ‡§ï‡•á ‡§ï‡§ø‡§®‡§æ‡§∞‡•á ‡§è‡§ï ‡§™‡•Å‡§∞‡§æ‡§®‡§æ",
    "‡§ñ‡•á‡§§‡•ã‡§Ç ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§Æ‡•á‡§Ç ‡§Ö‡§ï‡•á‡§≤‡§æ",
    "‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§á‡§≤‡§æ‡§ï‡•á ‡§Æ‡•á‡§Ç",
    "‡§∞‡•á‡§ó‡§ø‡§∏‡•ç‡§§‡§æ‡§® ‡§ï‡•á ‡§¨‡•Ä‡§ö‡•ã‡§Ç-‡§¨‡•Ä‡§ö",
    "‡§™‡§π‡§æ‡§°‡§º‡•ã‡§Ç ‡§ï‡•Ä ‡§ó‡•Å‡§´‡§æ ‡§ï‡•á ‡§™‡§æ‡§∏",
    "‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞ ‡§ï‡•á ‡§ï‡§ø‡§®‡§æ‡§∞‡•á ‡§è‡§ï ‡§ü‡•Ç‡§ü‡§æ ‡§π‡•Å‡§Ü"
]

shift_times = [
    "‡§∞‡§æ‡§§ 10 ‡§∏‡•á ‡§∏‡•Å‡§¨‡§π 6 ‡§¨‡§ú‡•á ‡§§‡§ï",
    "‡§∞‡§æ‡§§ 11 ‡§∏‡•á ‡§∏‡•Å‡§¨‡§π 7 ‡§¨‡§ú‡•á ‡§§‡§ï", 
    "‡§∞‡§æ‡§§ 9 ‡§∏‡•á ‡§∏‡•Å‡§¨‡§π 5 ‡§¨‡§ú‡•á ‡§§‡§ï",
    "‡§∞‡§æ‡§§ 12 ‡§∏‡•á ‡§∏‡•Å‡§¨‡§π 8 ‡§¨‡§ú‡•á ‡§§‡§ï"
]

# General horror story elements
horror_themes = [
    "‡§≠‡•Ç‡§§‡§ø‡§Ø‡§æ ‡§´‡•ã‡§® ‡§ï‡•â‡§≤",
    "‡§ó‡•Å‡§Æ‡§∂‡•Å‡§¶‡§æ ‡§¨‡§ö‡•ç‡§ö‡•á",
    "‡§™‡•Å‡§∞‡§æ‡§®‡§æ ‡§ò‡§∞",
    "‡§ú‡§æ‡§¶‡•Å‡§à ‡§Ü‡§à‡§®‡§æ",
    "‡§∂‡•ç‡§∞‡§æ‡§™‡§ø‡§§ ‡§µ‡§∏‡•ç‡§§‡•Å",
    "‡§Ö‡§ú‡§®‡§¨‡•Ä ‡§ï‡§æ ‡§™‡•Ä‡§õ‡§æ",
    "‡§∞‡§æ‡§§ ‡§ï‡§æ ‡§∏‡§´‡§∞",
    "‡§ü‡•Ç‡§ü‡§æ ‡§π‡•Å‡§Ü ‡§≤‡§ø‡§´‡•ç‡§ü",
    "‡§Ö‡§Ç‡§ß‡•á‡§∞‡•Ä ‡§∏‡•Å‡§∞‡§Ç‡§ó"
]

horror_settings = [
    "‡§è‡§ï ‡§™‡•Å‡§∞‡§æ‡§®‡•á ‡§Æ‡§ï‡§æ‡§® ‡§Æ‡•á‡§Ç",
    "‡§ò‡§®‡•á ‡§ú‡§Ç‡§ó‡§≤ ‡§ï‡•á ‡§¨‡•Ä‡§ö",
    "‡§ü‡•Ç‡§ü‡•Ä ‡§π‡•Å‡§à ‡§∏‡§°‡§º‡§ï ‡§™‡§∞",
    "‡§ñ‡§æ‡§≤‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§Æ‡•á‡§Ç",
    "‡§∞‡•á‡§ó‡§ø‡§∏‡•ç‡§§‡§æ‡§® ‡§ï‡•á ‡§¨‡•Ä‡§ö",
    "‡§∏‡§Æ‡•Å‡§¶‡•ç‡§∞ ‡§ï‡•á ‡§ï‡§ø‡§®‡§æ‡§∞‡•á",
    "‡§™‡§π‡§æ‡§°‡§º ‡§ï‡•Ä ‡§ö‡•ã‡§ü‡•Ä ‡§™‡§∞",
    "‡§≠‡•Ç‡§Æ‡§ø‡§ó‡§§ ‡§§‡§π‡§ñ‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç",
    "‡§™‡§∞‡§ø‡§§‡•ç‡§Ø‡§ï‡•ç‡§§ ‡§∏‡•ç‡§ï‡•Ç‡§≤ ‡§Æ‡•á‡§Ç"
]

horror_elements = [
    "‡§Ö‡§¶‡•É‡§∂‡•ç‡§Ø ‡§Ü‡§µ‡§æ‡§ú‡•á‡§Ç",
    "‡§ñ‡•Å‡§¶ ‡§∏‡•á ‡§π‡§ø‡§≤‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç",
    "‡§ó‡§æ‡§Ø‡§¨ ‡§π‡•ã‡§§‡•á ‡§≤‡•ã‡§ó",
    "‡§∏‡§Æ‡§Ø ‡§ï‡§æ ‡§∞‡•Å‡§ï ‡§ú‡§æ‡§®‡§æ",
    "‡§õ‡§æ‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§®‡•É‡§§‡•ç‡§Ø",
    "‡§ñ‡•Ç‡§® ‡§ï‡•á ‡§®‡§ø‡§∂‡§æ‡§®",
    "‡§ü‡•Ç‡§ü‡•á ‡§π‡•Å‡§è ‡§∂‡•Ä‡§∂‡•á",
    "‡§†‡§Ç‡§°‡•Ä ‡§π‡§µ‡§æ ‡§ï‡§æ ‡§ù‡•ã‡§Ç‡§ï‡§æ",
    "‡§Ö‡§ú‡•Ä‡§¨ ‡§Æ‡§π‡§ï"
]

# Story type selection
STORY_TYPES = ["job", "general"]

def generate_job_horror_story(custom_job=None, custom_location=None, custom_shift=None):
    """
    Generate a job-based horror story with random or custom parameters
    """
    job = custom_job or random.choice(job_types)
    location = custom_location or random.choice(locations)
    shift = custom_shift or random.choice(shift_times)
    
    job_chain = create_chain(job_prompt, llm)
    
    try:
        story = job_chain.invoke({
            "job_type": job,
            "location": location, 
            "shift_time": shift
        })
        return story
    except Exception as e:
        return f"‡§ú‡•â‡§¨ ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"

def generate_general_horror_story(custom_theme=None, custom_setting=None, custom_element=None):
    """
    Generate a general horror story with random or custom parameters
    """
    theme = custom_theme or random.choice(horror_themes)
    setting = custom_setting or random.choice(horror_settings)
    element = custom_element or random.choice(horror_elements)
    
    general_chain = create_chain(general_prompt, llm)
    
    try:
        story = general_chain.invoke({
            "theme": theme,
            "setting": setting,
            "element": element
        })
        return story
    except Exception as e:
        return f"‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ï‡§π‡§æ‡§®‡•Ä ‡§¨‡§®‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"

def generate_random_horror_story():
    """
    Randomly select between job horror story or general horror story
    """
    story_type = random.choice(STORY_TYPES)
    
    if story_type == "job":
        print("üè¢ Generating Job Horror Story...")
        return generate_job_horror_story()
    else:
        print("üëª Generating General Horror Story...")
        return generate_general_horror_story()

def generate_horror_story(custom_job=None, custom_location=None, custom_shift=None):
    """
    Backward compatibility function - generates random story type
    """
    return generate_random_horror_story()

def generate_multiple_stories(count=3):
    """
    Generate multiple horror stories with random types
    """
    stories = []
    for i in range(count):
        print(f"\n{'='*50}")
        print(f"‡§ï‡§π‡§æ‡§®‡•Ä #{i+1}")
        print('='*50)
        
        story = generate_random_horror_story()
        stories.append(story)
        print(story)
        
    return stories

# Enhanced story generator with more specific prompts
class HorrorStoryGenerator:
    def __init__(self, llm):
        self.llm = llm
        self.rules_template = """
        ‡§á‡§∏ ‡§°‡§∞‡§æ‡§µ‡§®‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è 3-4 ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§∏‡§Æ‡§Ø-‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ ‡§®‡§ø‡§Ø‡§Æ ‡§¨‡§®‡§æ‡§è‡§Ç:
        
        ‡§®‡•å‡§ï‡§∞‡•Ä: {job_type}
        ‡§∏‡•ç‡§•‡§æ‡§®: {location}
        
        ‡§®‡§ø‡§Ø‡§Æ ‡§á‡§∏ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§π‡•ã‡§Ç:
        - ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§•
        - ‡§Ö‡§≤‡•å‡§ï‡§ø‡§ï ‡§ò‡§ü‡§®‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç
        - ‡§¨‡§π‡•Å‡§§ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§î‡§∞ ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü
        - 1 ‡§Æ‡§ø‡§®‡§ü ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§™‡§Ø‡•Å‡§ï‡•ç‡§§
        
        ‡§â‡§¶‡§æ‡§π‡§∞‡§£:
        **11:00 ‡§¨‡§ú‡•á**, ‡§≤‡§æ‡§á‡§ü ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•á‡§®‡§æ‡•§
        """
    
    def generate_rules(self, job_type, location):
        """Generate specific rules for the story"""
        rules_prompt = ChatPromptTemplate.from_template(self.rules_template)
        rules_chain = create_chain(rules_prompt, self.llm)
        
        return rules_chain.invoke({
            "job_type": job_type,
            "location": location
        })
    
    def generate_complete_story(self, job_type=None, location=None):
        """Generate a complete story with custom rules"""
        job = job_type or random.choice(job_types)
        loc = location or random.choice(locations)
        
        rules = self.generate_rules(job, loc)
        
        complete_template = """
        ‡§¨‡§ß‡§æ‡§à ‡§π‡•ã‡•§ ‡§Ü‡§™‡§ï‡•ã '{job_type}' ‡§ï‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à‡•§
        
        ‡§Ø‡§π {location} ‡§∏‡•ç‡§•‡§ø‡§§ ‡§π‡•à‡•§ 
        
        ‡§ï‡§æ‡§Æ ‡§∏‡§∞‡§≤ ‡§π‡•à... ‡§≤‡•á‡§ï‡§ø‡§® ‡§ï‡•Å‡§õ ‡§®‡§ø‡§Ø‡§Æ ‡§π‡•à‡§Ç:
        
        {rules}
        
        ‡§ï‡•É‡§™‡§Ø‡§æ ‡§á‡§∏‡•á ‡§è‡§ï ‡§õ‡•ã‡§ü‡•Ä ‡§°‡§∞‡§æ‡§µ‡§®‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç‡•§
        ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: 100-150 ‡§∂‡§¨‡•ç‡§¶‡•ã‡§Ç ‡§Æ‡•á‡§Ç (1 ‡§Æ‡§ø‡§®‡§ü ‡§∏‡•á ‡§ï‡§Æ)‡•§
        """
        
        final_prompt = ChatPromptTemplate.from_template(complete_template)
        final_chain = create_chain(final_prompt, self.llm)
        
        return final_chain.invoke({
            "job_type": job,
            "location": loc,
            "rules": rules
        })

# Initialize the enhanced generator
enhanced_generator = HorrorStoryGenerator(llm)

# Additional utility functions
def get_story_type_examples():
    """Show examples of what each story type generates"""
    print("üìñ Story Type Examples:")
    print("\n1. Job Horror Story:")
    print("   - ‡§¨‡§ß‡§æ‡§à ‡§π‡•ã! ‡§Ü‡§™‡§ï‡•ã ‡§∞‡•á‡§°‡§ø‡§Ø‡•ã ‡§∏‡•ç‡§ü‡•á‡§∂‡§® ‡§ï‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Æ‡§ø‡§≤‡•Ä ‡§π‡•à...")
    print("   - Focus: Workplace horror with specific rules and schedules")
    
    print("\n2. General Horror Story:")
    print("   - ‡§≠‡•Ç‡§§‡§ø‡§Ø‡§æ ‡§´‡•ã‡§® ‡§ï‡•â‡§≤ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§π‡§æ‡§®‡•Ä...")
    print("   - Focus: Traditional horror themes with supernatural elements")

def generate_specific_type_story(story_type="random"):
    """
    Generate a specific type of horror story
    Args:
        story_type: "job", "general", or "random"
    """
    if story_type == "job":
        return generate_job_horror_story()
    elif story_type == "general":
        return generate_general_horror_story()
    else:
        return generate_random_horror_story()
